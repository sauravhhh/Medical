<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medicine Reminder Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .bg-gradient-white {
            background: linear-gradient(to bottom, #ffffff, #f9fafb, #f3f4f6);
        }
        .tab-active {
            border-bottom: 3px solid #3b82f6;
            color: #3b82f6;
        }
        .reminder-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .reminder-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .time-badge {
            background-color: #dbeafe;
            color: #1e40af;
        }
        .frequency-badge {
            background-color: #ede9fe;
            color: #5b21b6;
        }
        .dosage-badge {
            background-color: #dcfce7;
            color: #166534;
        }
        .schedule-badge {
            background-color: #fef3c7;
            color: #92400e;
        }
        .meal-badge {
            background-color: #fce7f3;
            color: #9f1239;
        }
        .time-input-group {
            animation: fadeIn 0.3s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .edit-mode {
            background-color: #fef3c7;
            border-color: #f59e0b;
        }
    </style>
</head>
<body class="bg-gradient-white min-h-screen flex flex-col">
    <header class="bg-white shadow-sm py-4">
        <div class="container mx-auto px-4">
            <h1 class="text-2xl md:text-3xl font-bold text-center text-gray-800">Medicine Reminder</h1>
            <p class="text-center text-gray-500 mt-1">Never miss your medication again</p>
        </div>
    </header>

    <main class="flex-grow container mx-auto px-4 py-6">
        <div class="max-w-3xl mx-auto">
            <!-- Add Reminder Form -->
            <div class="bg-white rounded-xl shadow-md overflow-hidden mb-6" id="form-container">
                <div class="p-6">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4" id="form-title">Add New Reminder</h2>
                    <form id="medicine-form" class="space-y-4">
                        <input type="hidden" id="edit-id" value="">
                        
                        <div>
                            <label class="block text-gray-700 font-medium mb-1" for="medicine-name">Medicine Name</label>
                            <input type="text" id="medicine-name" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., Paracetamol" required>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-700 font-medium mb-1" for="dosage">Dosage</label>
                                <input type="text" id="dosage" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., 500mg" required>
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 font-medium mb-1" for="frequency">Frequency</label>
                                <select id="frequency" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required onchange="handleFrequencyChange()">
                                    <option value="once-daily">Once Daily</option>
                                    <option value="twice-daily">Twice Daily</option>
                                    <option value="thrice-daily">Thrice Daily</option>
                                    <option value="as-needed">As Needed</option>
                                    <option value="weekly">Weekly</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Time Selection Section -->
                        <div id="time-selection" class="space-y-3">
                            <!-- Time inputs will be dynamically added here -->
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-700 font-medium mb-1" for="start-date">Start Date</label>
                                <input type="date" id="start-date" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            </div>
                            
                            <div>
                                <label class="block text-gray-700 font-medium mb-1" for="end-date">End Date (Optional)</label>
                                <input type="date" id="end-date" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-gray-700 font-medium mb-1" for="notes">Notes (Optional)</label>
                            <textarea id="notes" rows="2" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Any additional instructions..."></textarea>
                        </div>
                        
                        <div class="flex space-x-3">
                            <button type="submit" id="submit-btn" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200">
                                Add Reminder
                            </button>
                            <button type="button" id="cancel-btn" class="hidden flex-1 bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200" onclick="cancelEdit()">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Reminders List -->
            <div class="bg-white rounded-xl shadow-md overflow-hidden">
                <div class="p-6">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4">Your Reminders</h2>
                    <div id="reminders-list" class="space-y-4">
                        <!-- Reminders will be dynamically added here -->
                    </div>
                    <div id="no-reminders" class="text-center py-8 text-gray-500">
                        <i class="fas fa-pills text-4xl mb-3"></i>
                        <p>No reminders added yet. Add your first medicine reminder above.</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer class="py-4 text-center text-gray-500">
        <p>Made with ❤️ by Sauravhhh</p>
    </footer>

    <script>
        // Initialize reminders from localStorage
        let reminders = JSON.parse(localStorage.getItem('medicineReminders')) || [];
        let editingId = null;
        
        // DOM elements
        const medicineForm = document.getElementById('medicine-form');
        const remindersList = document.getElementById('reminders-list');
        const noReminders = document.getElementById('no-reminders');
        const timeSelection = document.getElementById('time-selection');
        const formContainer = document.getElementById('form-container');
        const formTitle = document.getElementById('form-title');
        const submitBtn = document.getElementById('submit-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        const editIdInput = document.getElementById('edit-id');
        
        // Set today's date as default for start date
        document.getElementById('start-date').valueAsDate = new Date();
        
        // Initialize time selection based on default frequency
        handleFrequencyChange();
        
        // Handle frequency change to show appropriate time inputs
        function handleFrequencyChange() {
            const frequency = document.getElementById('frequency').value;
            timeSelection.innerHTML = '';
            
            if (frequency === 'once-daily') {
                addTimeInput(1);
            } else if (frequency === 'twice-daily') {
                addTimeInput(1);
                addTimeInput(2);
            } else if (frequency === 'thrice-daily') {
                addTimeInput(1);
                addTimeInput(2);
                addTimeInput(3);
            }
        }
        
        // Add time input group
        function addTimeInput(number, timeValue = '', mealValue = '') {
            const timeInputGroup = document.createElement('div');
            timeInputGroup.className = 'time-input-group bg-gray-50 p-3 rounded-lg';
            timeInputGroup.innerHTML = `
                <div class="grid grid-cols-2 gap-3">
                    <div>
                        <label class="block text-gray-700 font-medium mb-1">Time ${number}</label>
                        <select id="time-${number}" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <option value="">Select time</option>
                            <option value="morning" ${timeValue === 'morning' ? 'selected' : ''}>Morning</option>
                            <option value="afternoon" ${timeValue === 'afternoon' ? 'selected' : ''}>Afternoon</option>
                            <option value="night" ${timeValue === 'night' ? 'selected' : ''}>Night</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-gray-700 font-medium mb-1">Meal Timing</label>
                        <select id="meal-${number}" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            <option value="">Select</option>
                            <option value="before" ${mealValue === 'before' ? 'selected' : ''}>Before Meal</option>
                            <option value="after" ${mealValue === 'after' ? 'selected' : ''}>After Meal</option>
                            <option value="anytime" ${mealValue === 'anytime' ? 'selected' : ''}>Anytime</option>
                        </select>
                    </div>
                </div>
            `;
            timeSelection.appendChild(timeInputGroup);
        }
        
        // Form submission handler
        medicineForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form values
            const medicineName = document.getElementById('medicine-name').value;
            const dosage = document.getElementById('dosage').value;
            const frequency = document.getElementById('frequency').value;
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const notes = document.getElementById('notes').value;
            
            // Get time and meal timing data
            const schedule = [];
            if (frequency === 'once-daily' || frequency === 'twice-daily' || frequency === 'thrice-daily') {
                const count = frequency === 'once-daily' ? 1 : frequency === 'twice-daily' ? 2 : 3;
                for (let i = 1; i <= count; i++) {
                    const time = document.getElementById(`time-${i}`).value;
                    const meal = document.getElementById(`meal-${i}`).value;
                    if (time && meal) {
                        schedule.push({ time, meal });
                    }
                }
            }
            
            // Check if we're editing or adding
            if (editingId) {
                // Update existing reminder
                const reminderIndex = reminders.findIndex(r => r.id === editingId);
                if (reminderIndex !== -1) {
                    reminders[reminderIndex] = {
                        id: editingId,
                        medicineName,
                        dosage,
                        frequency,
                        schedule,
                        startDate,
                        endDate,
                        notes,
                        isActive: reminders[reminderIndex].isActive
                    };
                    showNotification('Reminder updated successfully!');
                }
            } else {
                // Create new reminder object
                const newReminder = {
                    id: Date.now(),
                    medicineName,
                    dosage,
                    frequency,
                    schedule,
                    startDate,
                    endDate,
                    notes,
                    isActive: true
                };
                
                // Add to reminders array
                reminders.push(newReminder);
                showNotification('Reminder added successfully!');
            }
            
            // Save to localStorage
            saveReminders();
            
            // Reset form
            resetForm();
            
            // Update UI
            renderReminders();
        });
        
        // Function to reset form
        function resetForm() {
            medicineForm.reset();
            document.getElementById('start-date').valueAsDate = new Date();
            handleFrequencyChange();
            editingId = null;
            editIdInput.value = '';
            formTitle.textContent = 'Add New Reminder';
            submitBtn.textContent = 'Add Reminder';
            cancelBtn.classList.add('hidden');
            formContainer.classList.remove('edit-mode');
        }
        
        // Function to cancel edit
        function cancelEdit() {
            resetForm();
        }
        
        // Function to save reminders to localStorage
        function saveReminders() {
            localStorage.setItem('medicineReminders', JSON.stringify(reminders));
        }
        
        // Function to render reminders
        function renderReminders() {
            // Clear current list
            remindersList.innerHTML = '';
            
            // Check if there are any reminders
            if (reminders.length === 0) {
                noReminders.classList.remove('hidden');
                return;
            }
            
            noReminders.classList.add('hidden');
            
            // Sort reminders by start date
            const sortedReminders = [...reminders].sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
            
            // Render each reminder
            sortedReminders.forEach(reminder => {
                const reminderCard = createReminderCard(reminder);
                remindersList.appendChild(reminderCard);
            });
        }
        
        // Function to create a reminder card
        function createReminderCard(reminder) {
            const card = document.createElement('div');
            card.className = `reminder-card bg-white border border-gray-200 rounded-lg p-4 ${reminder.isActive ? '' : 'opacity-60'}`;
            
            // Format dates
            const startDate = new Date(reminder.startDate).toLocaleDateString();
            const endDate = reminder.endDate ? new Date(reminder.endDate).toLocaleDateString() : 'Ongoing';
            
            // Format frequency for display
            const frequencyDisplay = {
                'once-daily': 'Once Daily',
                'twice-daily': 'Twice Daily',
                'thrice-daily': 'Thrice Daily',
                'as-needed': 'As Needed',
                'weekly': 'Weekly'
            };
            
            // Format schedule for display
            let scheduleDisplay = '';
            if (reminder.schedule && reminder.schedule.length > 0) {
                scheduleDisplay = reminder.schedule.map(s => {
                    const timeDisplay = s.time.charAt(0).toUpperCase() + s.time.slice(1);
                    const mealDisplay = s.meal === 'before' ? 'Before Meal' : s.meal === 'after' ? 'After Meal' : 'Anytime';
                    return `${timeDisplay} (${mealDisplay})`;
                }).join(', ');
            }
            
            card.innerHTML = `
                <div class="flex justify-between items-start">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800">${reminder.medicineName}</h3>
                        <div class="flex flex-wrap gap-2 mt-2">
                            <span class="dosage-badge text-xs font-medium px-2.5 py-0.5 rounded-full">${reminder.dosage}</span>
                            <span class="frequency-badge text-xs font-medium px-2.5 py-0.5 rounded-full">${frequencyDisplay[reminder.frequency]}</span>
                            <span class="time-badge text-xs font-medium px-2.5 py-0.5 rounded-full">Start: ${startDate}</span>
                            ${reminder.endDate ? `<span class="text-xs font-medium px-2.5 py-0.5 rounded-full bg-gray-100 text-gray-800">End: ${endDate}</span>` : ''}
                            ${scheduleDisplay ? `<span class="schedule-badge text-xs font-medium px-2.5 py-0.5 rounded-full">${scheduleDisplay}</span>` : ''}
                        </div>
                        ${reminder.notes ? `<p class="mt-2 text-sm text-gray-600">${reminder.notes}</p>` : ''}
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="toggleReminderStatus(${reminder.id})" class="text-gray-500 hover:text-blue-600 transition-colors duration-200">
                            <i class="fas ${reminder.isActive ? 'fa-pause' : 'fa-play'}"></i>
                        </button>
                        <button onclick="editReminder(${reminder.id})" class="text-gray-500 hover:text-yellow-600 transition-colors duration-200">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteReminder(${reminder.id})" class="text-gray-500 hover:text-red-600 transition-colors duration-200">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            
            return card;
        }
        
        // Function to edit a reminder
        function editReminder(id) {
            const reminder = reminders.find(r => r.id === id);
            if (!reminder) return;
            
            // Set editing mode
            editingId = id;
            editIdInput.value = id;
            formTitle.textContent = 'Edit Reminder';
            submitBtn.textContent = 'Update Reminder';
            cancelBtn.classList.remove('hidden');
            formContainer.classList.add('edit-mode');
            
            // Populate form with reminder data
            document.getElementById('medicine-name').value = reminder.medicineName;
            document.getElementById('dosage').value = reminder.dosage;
            document.getElementById('frequency').value = reminder.frequency;
            document.getElementById('start-date').value = reminder.startDate;
            document.getElementById('end-date').value = reminder.endDate || '';
            document.getElementById('notes').value = reminder.notes || '';
            
            // Handle frequency change to show appropriate time inputs
            handleFrequencyChange();
            
            // Populate time and meal data
            if (reminder.schedule && reminder.schedule.length > 0) {
                reminder.schedule.forEach((item, index) => {
                    const timeSelect = document.getElementById(`time-${index + 1}`);
                    const mealSelect = document.getElementById(`meal-${index + 1}`);
                    if (timeSelect) timeSelect.value = item.time;
                    if (mealSelect) mealSelect.value = item.meal;
                });
            }
            
            // Scroll to form
            formContainer.scrollIntoView({ behavior: 'smooth' });
        }

      // Function to toggle reminder status
        function toggleReminderStatus(id) {
            const reminderIndex = reminders.findIndex(r => r.id === id);
            if (reminderIndex !== -1) {
                reminders[reminderIndex].isActive = !reminders[reminderIndex].isActive;
                saveReminders();
                renderReminders();
                showNotification(reminders[reminderIndex].isActive ? 'Reminder activated!' : 'Reminder paused!');
            }
        }
        
        // Function to delete a reminder
        function deleteReminder(id) {
            if (confirm('Are you sure you want to delete this reminder?')) {
                reminders = reminders.filter(r => r.id !== id);
                saveReminders();
                renderReminders();
                showNotification('Reminder deleted!');
            }
        }
        
        // Function to show notification
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform transition-transform duration-300 translate-y-20';
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Animate in
      setTimeout(() => {
                notification.classList.remove('translate-y-20');
            }, 10);
            
            // Animate out and remove
            setTimeout(() => {
                notification.classList.add('translate-y-20');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }
        
        // Initial render
        renderReminders();
    </script>
</body>
</html>
